// <auto-generated />
using System;
using DoctorsListAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DoctorsListAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190318223221_CreateInitialSchema")]
    partial class CreateInitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("DoctorsListAPI.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender");

                    b.Property<int?>("MedicalSchoolId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MedicalSchoolId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.DoctorLanguage", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<int>("LanguageId");

                    b.HasKey("DoctorId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DoctorLanguages");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<int>("SpecialtyId");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.MedicalSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MedicalSchools");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.PatientRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int?>("DoctorId");

                    b.Property<int>("Rating");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientRatings");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.Doctor", b =>
                {
                    b.HasOne("DoctorsListAPI.Models.MedicalSchool", "MedicalSchool")
                        .WithMany()
                        .HasForeignKey("MedicalSchoolId");
                });

            modelBuilder.Entity("DoctorsListAPI.Models.DoctorLanguage", b =>
                {
                    b.HasOne("DoctorsListAPI.Models.Doctor", "Doctor")
                        .WithMany("DoctorLanguages")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DoctorsListAPI.Models.Language", "Language")
                        .WithMany("DoctorLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DoctorsListAPI.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("DoctorsListAPI.Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DoctorsListAPI.Models.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DoctorsListAPI.Models.PatientRating", b =>
                {
                    b.HasOne("DoctorsListAPI.Models.Doctor", "Doctor")
                        .WithMany("PatientRatings")
                        .HasForeignKey("DoctorId");
                });
#pragma warning restore 612, 618
        }
    }
}
